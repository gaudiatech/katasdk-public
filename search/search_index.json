{"config":{"lang":["en","fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started with PYV","text":"<p>PYV is the name of a game engine fully written in python.</p> <p>It's a wrapper around the popular <code>pygame</code> librabry, therefore if you have some prior experience with developing games with <code>pygame</code>, transitioning to PYV should be extremely easy!</p> <p>This page source file and media content have been localized after applying the localized build logic described below.</p>"},{"location":"#a-basic-example","title":"A Basic Example","text":"<p>Here is a quick recap of the files used as source and the generated build structure of what you see:</p> <pre><code>docs\n\u251c\u2500\u2500 image.en.png  &lt;-- this image file is used here\n\u251c\u2500\u2500 image.fr.png\n\u251c\u2500\u2500 index.fr.md\n\u251c\u2500\u2500 index.md  &lt;-- this file is used here\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 named_file.en.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file.fr.md\n\u2514\u2500\u2500 topic2\n    \u251c\u2500\u2500 index.en.md\n    \u2514\u2500\u2500 index.md\n</code></pre> <pre><code>site\n\u251c\u2500\u2500 en\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png  &lt;-- you see this image here on the /en version\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html  &lt;-- you are here on the /en version\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 fr\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 image.png  &lt;-- you see this image here on the default version\n\u251c\u2500\u2500 index.html  &lt;-- you are here on the default version\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 topic2\n    \u2514\u2500\u2500 index.html\n</code></pre>"},{"location":"#automatic-media-link-asset-localization","title":"Automatic media / link / asset localization","text":"<p>This image source is dynamically localized while still being referenced in the markdown source of the page as <code>![localized image](image.png)</code>. This means that this plugin allows you to not worry about links, media and static content file names, just use their simple name and concentrate on your content translation!</p>"},{"location":"#localized-build-logic","title":"Localized build logic","text":"<p>The settings used to build this site is:</p> <pre><code>plugins:\n  - i18n:\n      default_language: en\n      languages:\n        en: english\n        fr: fran\u00e7ais\n</code></pre> <p>Meaning that we will get three versions of our website:</p> <ol> <li>the <code>default_language</code> version which will use any <code>.md</code> documentation file first and fallback to any <code>.en.md</code> file found since <code>en</code> is the default language</li> <li>the <code>/en</code> language version which will use any <code>.en.md</code> documentation file first and fallback to any <code>.md</code> file found</li> <li>the <code>/fr</code> language version which will use any <code>.fr.md</code> documentation file first and fallback to either <code>.en.md</code> file (default language) or <code>.md</code> file (default language fallback) whichever comes first</li> </ol> <p>Given that logic, the following <code>site</code> structure is built:</p> <pre><code>site\n\u251c\u2500\u2500 404.html\n\u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 images\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 javascripts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 stylesheets\n\u251c\u2500\u2500 en\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 fr\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 image.png\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 topic2\n    \u2514\u2500\u2500 index.html\n</code></pre>"},{"location":"ECS/named_file/","title":"ECS (Entities, composants, systems)","text":""},{"location":"GameTutorials/Platformer/","title":"Tutorial platformer","text":"<p>This tutorial is here to help you build upon the foundation of the platformer template available in the Pyved-CLI.</p> <p>If you need further help customizing your game, go read the pyved-engine full documentation.</p>"},{"location":"GameTutorials/Platformer/#entity-component-system-ecs-for-game-development","title":"Entity Component System (ECS) for Game Development","text":"<p>The Entity Component System (ECS) is a software architectural pattern commonly used in game development to manage and organize game objects, their behavior, and their data. It is designed to improve code performance, scalability, and flexibility by separating the game's logic into distinct components and entities.</p>"},{"location":"GameTutorials/Platformer/#key-components-of-ecs","title":"Key Components of ECS","text":"<ol> <li> <p>Entities: In ECS, an entity represents a game object or an abstract entity in your game world. An entity is essentially a unique identifier, often just an integer or a handle, that is used to group and manage related components. Entities themselves don't contain any behavior or data; they serve as a way to assemble components.</p> </li> <li> <p>Components: Components are the building blocks of an ECS system. Each component represents a single, self-contained piece of data and behavior. For example, in a 2D game, you might have components for position, sprite rendering, physics, and more. Components do not have any logic themselves; they are just containers for data.</p> </li> <li> <p>Systems: Systems are responsible for defining the behavior and operations performed on entities that have specific combinations of components. Systems process entities based on the components they contain, and they can perform various tasks such as updating the physics simulation, rendering objects, handling input, and more. Systems are typically where the game's logic resides.</p> </li> </ol>"},{"location":"GameTutorials/Platformer/#codebase","title":"Codebase","text":"<p>Let's go for a quick tour around the code in order for you to best understand how to customize this template to your liking.</p> <p>The files to customize are located inside of the <code>cartridge</code> folder : </p> <ul> <li> <p><code>shared.py</code> : This file will store all of your constants.</p> </li> <li> <p><code>gamedef.py</code> : This file will store your game loop thanks to 3 declaration available with pyved, declare_begin that will init your game, declare_update that will keep your update loop, and then declare_end to end the game. You will also keep your entities setup here.</p> </li> <li> <p><code>systems.py</code> : This file will keep the logic of your game through the ECS systems, if you want to implement some kind of logic events, you will have them stored here.</p> </li> <li> <p><code>World.py</code> : This file will have your entity creation in the game world.</p> </li> </ul> <p>When testing that demo, at any time you can press ESCAPE to quit the demo.</p> <p>So let's jump right into it, and add our first extra- feature! What if we give a jetpack to our player?!</p>"},{"location":"GameTutorials/Platformer/#step-1-all-i-want-is-a-jetpack","title":"Step 1. All I want is a Jetpack!","text":"<p>Let's make your first feature : </p> <p>We will start simple, and define what we will need for a Jetpack to work :</p> <ul> <li> <p>Add a Jetpack attribute to the player, your character will need it to use a jetpack \ud83d\ude0a</p> </li> <li> <p>A jetpack speed ratio; we could technically use the same speed as the player one, but it feels better to have a difference of speed when switching mode \ud83d\ude80</p> </li> <li> <p>And finally, the logic !</p> </li> </ul> <p>So, let's start by adding the jetpack attributes to our player.</p>"},{"location":"GameTutorials/Platformer/#adding-a-jetpack-component","title":"Adding a jetpack component","text":"<p>Go into <code>World.py</code> and <code>gamedef.py</code> </p> <p><code>World.py</code>  We first have this code : </p> <pre><code>        pyv.init_entity(player, {\n            'speed': [0.0, 0.0],\n            'accel_y': 0.0,\n            'gravity': 14.5,\n            'lower_block': None,\n            'body': pygame.rect.Rect(shared.SPAWN[0], shared.SPAWN[1], shared.AVATAR_SIZE, shared.AVATAR_SIZE),\n            'camera': cam_ref,\n            'controls': {'up': False, 'down': False, 'left': False, 'right': False}\n            })\n</code></pre> <p>We will add a jetpack attribute inside of the player entity </p> <pre><code>        pyv.init_entity(player, {\n            'speed': [0.0, 0.0],\n            'accel_y': 0.0,\n            'gravity': 14.5,\n            'lower_block': None,\n            'jetpack': False,\n            'body': pygame.rect.Rect(shared.SPAWN[0], shared.SPAWN[1], shared.AVATAR_SIZE, shared.AVATAR_SIZE),\n            'camera': cam_ref,\n            'controls': {'up': False, 'down': False, 'left': False, 'right': False}\n            })\n</code></pre> <p>Now, let's dive into the <code>gamedef.py</code> file : </p> <pre><code>    pyv.define_archetype('player', (\n        'speed', 'accel_y', 'gravity', 'lower_block', 'body', 'camera', 'controls'\n    ))\n</code></pre> <p>And we also add the jetpack here :</p> <pre><code>    pyv.define_archetype('player', (\n        'speed', 'accel_y', 'gravity', 'lower_block', 'jetpack', 'body', 'camera', 'controls'\n    ))\n</code></pre>"},{"location":"GameTutorials/Platformer/#tuning-the-jetpack-power","title":"Tuning the jetpack power!","text":"<p>This step is pretty straightforward, go inside the <code>shared.py</code> file</p> <p>We will simply add the attribute constant here :</p> <pre><code>JETPACK_RATIO = 0.05\n</code></pre>"},{"location":"GameTutorials/Platformer/#jetpack-steering","title":"Jetpack steering?","text":"<p>This is now the hard part, lets add logic to our code in order to be able to interract with the jetpack.</p> <p>Let's go inside  <code>systems.py</code>, now find the block <code>def steering_sys(...):</code></p> <p>That chunk of code represents the system that handles the player movement. The way we will handle our jetpack is to check if our player is using it, in order to disable the jump if the player is using the jetpack since it will replace it. What we need to do is: find the following line..</p> <pre><code>ctrl['down'] = activekeys[pg.K_DOWN]\n</code></pre> <p>Right beneath that line, we will add this code:</p> <pre><code>        if not prevdown_key_value and ctrl['down']:\n            ent['jetpack'] = not ent['jetpack']\n            print('JETPACK:', ('on' if ent['jetpack'] else 'off'))\n</code></pre> <p>this will act like a switch on the jetpack flag, tied to the Player entity.</p> <p>Next, we can go inside the game and check if the console we start it from displays the jetpack on/off message whenever we press the arrow up key.</p> <p>It displays fine, but we still jump, no jetpack power is available... Let's fix this ! Still in steering system, you need to find a chunk of code that looks like this:</p> <pre><code>        if ent['lower_block']:\n            if not prevup_key_value and ctrl['up']:\n                ent['accel_y'] -= shared.JUMP_POWER\n                ent['lower_block'] = None\n</code></pre> <p>And this is how we handle our jump mechanic, we will extend this logic (add a condition over it, make it more complex) in order to create a scenario where:</p> <p>In one case: player uses the jetpack, and in the other case player simply jumps.</p> <pre><code>        if not ent['jetpack']:\n            if ent['lower_block']:\n                if not prevup_key_value and ctrl['up']:\n                    ent['accel_y'] -= shared.JUMP_POWER\n                    ent['lower_block'] = None\n        else:  # other rules apply!\n            if ctrl['up']:\n                ent['accel_y'] = -shared.JUMP_POWER * shared.JETPACK_RATIO\n</code></pre> <p>As you can see above, we basically use the same formula to calculate our jumping acceleration, we just multiply it with the <code>JETPACK_RATIO</code> we've set earlier.</p> <p>If you've modified everything as we explained, you should be able to trigger the jetpack (using the DOWN ARROW), and now you (using the UP ARROW) you will have a new exciting way to move around our little virtual world!</p>"},{"location":"GameTutorials/Platformer/#step-2-adding-textures-to-our-game","title":"Step 2. adding textures to our game","text":"<p>Our game as of now, works well as a technical demo, but it is a bit sad to play only with blocks, isn't it ?</p> <p>So let's fix this !</p> <p>We will add textures to our walls, our player and a background ! </p> <p>Let's setup pydev to distribute the images across the code. You will need three files: <code>background.png</code>, <code>wall_small.png</code>, and <code>barry.png</code>. If you don't want to draw your own pixel art, we provide you with sample files in the: following folder You can download the 3 and put it in the <code>cartridge/</code> folder of your game.</p> <p>Now open the <code>metadat.json</code> file to edit it. We need list new game assets, in the <code>assets</code> field:</p> <pre><code>\"assets\": [\n    \"my_map.ncsv\", \"background.png\", \"wall_small.png\", \"barry.png\"\n],\n</code></pre> <p>These assets will get loaded automatically (pre-loading assets is a feature our game engine relies on) PYV handles the loading of images from your drive to your program. So we have added our background, our wall texture and our player image.</p> <p>However, since we are unsure whether the size of our assets matches the needs of our game, it looks safer to prepare assets manually, by rescaling images.</p> <p>You will see 2 ways for preparing/rescaling your assets:  you can chose which one you prefer for your game, however, one is suboptimized, and can be harmful to the game performance in some cases.</p>"},{"location":"GameTutorials/Platformer/#prepare-assets-method-1","title":"Prepare assets: method 1","text":"<p>Let's start with modifying the player entity.</p> <p>Once again, go to <code>gamedef.py</code>, inside the function <code>troid_init(...)</code> add a component named <code>icon</code> add the player archetype:</p> <pre><code>    pyv.define_archetype('player', (\n        'speed',\n        'accel_y',\n        'gravity',\n        'lower_block',\n        'body',\n        'camera',\n        'controls',\n        'icon'\n    ))\n</code></pre> <p>Next, go to <code>World.py</code>,  search for the <code>create_avatar</code> method.  Here, at the very beginning of the method, we will create an <code>icon</code> variable, add the following lines above the <code>pyv.new_from_archetype(...)</code> call</p> <pre><code>        player_image = pyv.vars.images['barry']\n        icon = pygame.transform.scale(player_image, (shared.AVATAR_SIZE, shared.AVATAR_SIZE))\n</code></pre> <p>Then, at the player entity initialization, we can set a value for the component <code>icon</code>:</p> <pre><code>        pyv.init_entity(player, {\n            'speed': [0.0, 0.0],\n            'accel_y': 0.0,\n            'gravity': 14.5,\n            'lower_block': None,\n            'jetpack': False,\n            'body': pygame.rect.Rect(shared.SPAWN[0], shared.SPAWN[1], shared.AVATAR_SIZE, shared.AVATAR_SIZE),\n            'camera': cam_ref,\n            'controls': {'up': False, 'down': False, 'left': False, 'right': False},\n            'icon': icon\n        })\n</code></pre> <p>Here we load our image from the pyved image loader, and then resize it. This is suboptimized because it is resized everytime the player is loaded, in this case, it is not that problematic since the player is only loaded whenever the level is created.</p>"},{"location":"GameTutorials/Platformer/#prepare-assets-method-2","title":"Prepare assets: method 2","text":"<p>Let's now add our background and wall texture, to do so, we will use another approach from the one before We will create a dictionnary where all of our images will be kept. So go into <code>shared.py</code> and add at the end of the file, the block:</p> <pre><code>gam_assets = dict()\n\n\ndef prepare_game_assets():\n    global gam_assets\n    gam_assets['bg'] = pygame.transform.scale(pyv.vars.images['background'], (WIDTH, HEIGHT))\n    gam_assets['wall'] = pygame.transform.scale(pyv.vars.images['wall_small'], (BLOCKSIZE, BLOCKSIZE))\n</code></pre> <p>Here you can see we created new constants for images, and transformed them to match the size we're using in the project.</p> <p>This function needs to be called at the beginning of our program, so add it in the <code>init_troid(...)</code> function, in the <code>gamedef.py</code> file.</p> <pre><code>def troid_init(vms=None):\n    pyv.init()\n    screen = pyv.get_surface()\n    shared.screen = screen\n    shared.prepare_game_assets()\n</code></pre>"},{"location":"GameTutorials/Platformer/#use-assets-for-real-just-do-it","title":"Use assets. For real, just do it","text":"<p>Since all assets are now ready (loaded into the memory at runtime), the rest of the task is to adapt what's rendered by replacing the colored squares with real images. To do so, navigate to <code>systems.py</code>, in the <code>rendering_sys</code>.</p> <p>Let's first add the background, just after the background fill :</p> <pre><code>    scr.fill((0, 27, 0))\n    scr.blit(shared.gam_assets['bg'], [0, 0])\n</code></pre> <p>And look for thi chunk of code, we will replace it:</p> <pre><code>    # draw player!\n    disp(scr, pl_ent, 'red')\n    # draw blocks\n    li_blocks = pyv.find_by_archetype('block')\n    for b in li_blocks:\n        disp(scr, b, 'blue')\n</code></pre> <p>The new version is:</p> <pre><code> # draw player!\n    disp(scr, pl_ent, img=pl_ent['icon'])\n    # draw blocks\n    li_blocks = pyv.find_by_archetype('block')\n    for b in li_blocks:\n        disp(scr, b, img=shared.gam_assets['wall'])\n</code></pre> <p>Watch out, do not modify <code>mob_blocks</code> (displayed in orange) We're all done for that step!</p> <p>One could add more textures for the moving blocks for example, but we wanted to keep it as surface level as possible.</p>"},{"location":"GameTutorials/Platformer/#step-3-adding-a-new-type-of-entity","title":"Step 3. Adding a new type of Entity","text":"<p>Now, let's get our hands dirty with some hard stuff!</p> <p>We will create a block that allows us to change levels. There's many other way to decline the code used, so be creative.</p> <p>We will first modify our map data and add a new block somewhere, put it wherever you want. The map data is stored in the file: <code>my_map.ncsv</code> You can see the map is encoded as a matrix of numbers: 0, 1, 2 and 3 are used codes. 0 denotes the empty space for example. 1 denotes regular walls etc.</p> <p>Let's keep going and declare a new type of block by adding a 4 value somewhere. It's better to replace a 0 value somewhere on the 15th line (it is approximatively the floor on which the player is walking) by the new value 4.</p>"},{"location":"GameTutorials/Platformer/#modding-the-game","title":"Modding the game","text":"<p>Data has changed, but not the game itself.</p> <p>Once your <code>my_map.ncsv</code> is saved, go into <code>gamedef.py</code>, where we will add a new archetype As defined before, the archetypes allows us to creates new entities with special rules.</p> <p>Go after the existing list of archetypes and let's add our new block, the <code>tp_block</code></p> <pre><code>    pyv.define_archetype('tp_block', ['body', ])\n</code></pre> <p>Here we just added the property <code>body</code> to our block, because we just need it to have an actual hitbox, the logic of what happens whenever we reach the blocks is elsewhere.</p> <p>Now that our archetype exists, we need our world to know who's this new kid in the block.</p> <p>Go inside the <code>World.py</code> file and under the <code>add_terrain_blocks</code> function.</p> <p>Since this function handles the initialisation and properties of blocks, let's add the logic: how to process our value \"4\", link it to a <code>tp_block</code> entity: Be careful, this needs to be added inside the for loop, not outside.</p> <pre><code>            elif btype == 4:\n                pyv.init_entity(\n                    pyv.new_from_archetype('tp_block'), {\n                        'body': rrect\n                    }\n                )\n                self._platforms.append(rrect)\n</code></pre> <p>We give the property <code>rect</code> to the <code>body</code>,  this will allow us to give the block a proper hitbox.</p> <p>Now we will take a small break from all of this hard stuff, and create our new map, we will need it to load somewhere. Just create a <code>map2.ncsv</code> file by copying the first one and change a few blocks here and there!</p> <p>Also make sure that you list the: <code>map2.ncsv</code> file in your list of assets to load, as specified in your <code>metadat.json</code> file (just append the name <code>map2.ncsv</code> at the end af the existing asset list)</p>"},{"location":"GameTutorials/Platformer/#loading-another-world","title":"Loading another world","text":"<p>We're almost done!</p> <p>Hang in there! You're doing great.</p> <p>Go to <code>systems.py</code> and draw our new block on the map, go back to the same place where we previously (Step 2. of the tutorial) changed how way blocks are displayed. It's around line 200 of that file. Add the following line after the display of orange blocks:</p> <pre><code>    temp = pyv.find_by_archetype('tp_block')\n    if len(temp):\n        tp_block = temp[0]\n        disp(scr, tp_block, 'purple', 3)\n</code></pre> <p>Now that the block is present on the map, let's add some logic for it, in order to make it truly a new feature. Go inside the <code>teleport_sys</code> (a system that handles player teleportation), at the end of that function please add:</p> <pre><code>    temp = pyv.find_by_archetype('tp_block')\n    if len(temp):\n        tp_block = temp[0]\n        if player['body'].colliderect(tp_block['body']):\n            player['next_map'] = 'map2'\n            _proc_unload_load()\n</code></pre> <p>Here what we're doing is creating a var <code>temp</code> that will reference our <code>\u0167p_block</code>, and thanks to <code>colliderect</code> we will detect if the 2 blocks are colliding. Once they collide, we just move our player to the next map, by unloading the current map and loading the next one.</p>"},{"location":"GameTutorials/Platformer/#removing-a-nasty-bug","title":"Removing a nasty bug","text":"<p>Last step:</p> <p>Unfortunately, a small bug exists in the skeleton. You will need to fix it to complete the tutorial. It's like your level 99 BOSS.</p> <p>The bug is located in <code>systems.py</code> your need to replace the very last lines of the <code>_proc_unload_load()</code> function, that is these 4 lines:</p> <pre><code>    shared.world.load_map(\n        os.path.join(shared.ASSETS_FOLDER, 'map2.csv')\n    )  # replace all blocks, etc.\n    shared.world.create_avatar(camref)\n</code></pre> <p>By something simpler, more flexible (we use the component <code>next_map</code> to tell the game where the player should be teleported to):</p> <pre><code>    shared.world.load_map(player['next_map'])\n    shared.world.create_avatar(camref)\n</code></pre> <p>Hopefully, your game now looks like this! You are now able to travel between two different worlds... Two independant maps!</p> <p></p> <p>Et voila... You're done! Amazing isn't it? Congrats for completing this tutorial.</p> <p>If something is wrong/ if the program crashes, make sure to read again all previous steps, one by one and check if you haven't forgot anything. In case this is not enough to find the solution, you can always join our Discord community and ask for help. More advanced PYV users will be glad to help you!</p> <p>Now go ahead, imagine a fourth or even a fifth feature to add by yourself! One interesting feature for example could be: a special code in the map model, to specify where the player should respawn...</p> <p>But hey, be creative! Have fun coding with PYV.</p>"},{"location":"topic1/named_file/","title":"Topic 1 (default version + english version)","text":"<p>Tip</p> <p>Use the language switcher in the header to switch between the localized versions of this demo website. This switcher is part of mkdocs-material &gt;= 7.1.0 and is automatically configured by this plugin or can be statically configured from the mkdocs.yml file.</p>"},{"location":"topic1/named_file/#what-you-are-seeing-now","title":"What you are seeing now","text":"<p>This page source file and media content have been localized after applying the localized build logic described below. Here is a quick recap of the files used as source and the generated build structure of what you see:</p> <pre><code>docs\n\u251c\u2500\u2500 image.en.png  &lt;-- this image file is used on both the default and /en versions\n\u251c\u2500\u2500 image.fr.png\n\u251c\u2500\u2500 index.fr.md\n\u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 named_file.en.md  &lt;-- this file is used on both the default and /en versions\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file.fr.md\n\u2514\u2500\u2500 topic2\n    \u251c\u2500\u2500 index.en.md\n    \u2514\u2500\u2500 index.md\n</code></pre> <pre><code>site\n\u251c\u2500\u2500 en\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png  &lt;-- you see this image on the /en version\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html  &lt;-- you are here on the /en version\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 fr\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 image.png  &lt;-- you see this image on the default version\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html  &lt;-- you are here on the default version\n\u2514\u2500\u2500 topic2\n    \u2514\u2500\u2500 index.html\n</code></pre>"},{"location":"topic1/named_file/#automatic-media-link-asset-localization","title":"Automatic media / link / asset localization","text":"<p>This image source is dynamically localized while still being referenced in the markdown source of the page as <code>![localized image](../image.png)</code>. This means that this plugin allows you to not worry about links, media and static content file names, just use their simple name and concentrate on your content translation!</p>"},{"location":"topic1/named_file/#localized-build-logic","title":"Localized build logic","text":"<p>The settings used to build this site is:</p> <pre><code>plugins:\n  - i18n:\n      default_language: en\n      languages:\n        en: english\n        fr: fran\u00e7ais\n</code></pre> <p>Meaning that we will get three versions of our website:</p> <ol> <li>the <code>default_language</code> version which will use any <code>.md</code> documentation file first and fallback to any <code>.en.md</code> file found since <code>en</code> is the default language</li> <li>the <code>/en</code> language version which will use any <code>.en.md</code> documentation file first and fallback to any <code>.md</code> file found</li> <li>the <code>/fr</code> language version which will use any <code>.fr.md</code> documentation file first and fallback to either <code>.en.md</code> file (default language) or <code>.md</code> file (default language fallback) whichever comes first</li> </ol> <p>Given that logic, the following <code>site</code> structure is built:</p> <pre><code>site\n\u251c\u2500\u2500 404.html\n\u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 images\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 javascripts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 stylesheets\n\u251c\u2500\u2500 en\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 fr\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 image.png\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 topic2\n    \u2514\u2500\u2500 index.html\n</code></pre>"},{"location":"topic2/","title":"Topic 2 (default version only)","text":"<p>Tip</p> <p>Use the language switcher in the header to switch between the localized versions of this demo website. This switcher is part of mkdocs-material &gt;= 7.1.0 and is automatically configured by this plugin or can be statically configured from the mkdocs.yml file.</p>"},{"location":"topic2/#what-you-are-seeing-now","title":"What you are seeing now","text":"<p>This page source file and media content have been localized after applying the localized build logic described below. Here is a quick recap of the files used as source and the generated build structure of what you see:</p> <pre><code>docs\n\u251c\u2500\u2500 image.en.png  &lt;-- this image file is used here on the default version\n\u251c\u2500\u2500 image.fr.png\n\u251c\u2500\u2500 index.fr.md\n\u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 named_file.en.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file.fr.md\n\u2514\u2500\u2500 topic2\n    \u251c\u2500\u2500 index.en.md\n    \u2514\u2500\u2500 index.md  &lt;-- this file is used here on the default version\n</code></pre> <pre><code>site\n\u251c\u2500\u2500 en\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 fr\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 image.png  &lt;-- you see this image here on the default version\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 topic2\n    \u2514\u2500\u2500 index.html  &lt;-- you are here on the default version\n</code></pre>"},{"location":"topic2/#automatic-media-link-asset-localization","title":"Automatic media / link / asset localization","text":"<p>This image source is dynamically localized while still being referenced in the markdown source of the page as <code>![localized image](../image.png)</code>. This means that this plugin allows you to not worry about links, media and static content file names, just use their simple name and concentrate on your content translation!</p>"},{"location":"topic2/#localized-build-logic","title":"Localized build logic","text":"<p>The settings used to build this site is:</p> <pre><code>plugins:\n  - i18n:\n      default_language: en\n      languages:\n        en: english\n        fr: fran\u00e7ais\n</code></pre> <p>Meaning that we will get three versions of our website:</p> <ol> <li>the <code>default_language</code> version which will use any <code>.md</code> documentation file first and fallback to any <code>.en.md</code> file found since <code>en</code> is the default language</li> <li>the <code>/en</code> language version which will use any <code>.en.md</code> documentation file first and fallback to any <code>.md</code> file found</li> <li>the <code>/fr</code> language version which will use any <code>.fr.md</code> documentation file first and fallback to either <code>.en.md</code> file (default language) or <code>.md</code> file (default language fallback) whichever comes first</li> </ol> <p>Given that logic, the following <code>site</code> structure is built:</p> <pre><code>site\n\u251c\u2500\u2500 404.html\n\u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 images\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 javascripts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 stylesheets\n\u251c\u2500\u2500 en\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 fr\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 image.png\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 topic2\n    \u2514\u2500\u2500 index.html\n</code></pre>"},{"location":"fr/","title":"Page d'accueil (french version)","text":"<p>Astuce</p> <p>Utilisez le s\u00e9lecteur de langue dans la barre de titre pour passer d'une version localis\u00e9e \u00e0 l'autre de ce site de d\u00e9monstration. Ce s\u00e9lecteur fait partie de mkdocs-material &gt;= 7.1.0 et est configur\u00e9 automatiquement par ce plugin ou peut \u00eatre d\u00e9fini de mani\u00e8re statique depuis le fichier mkdocs.yml.</p>"},{"location":"fr/#ce-que-vous-voyez-en-ce-moment","title":"Ce que vous voyez en ce moment","text":"<p>La source de cette page et son contenu m\u00e9dia ont \u00e9t\u00e9 localis\u00e9s en suivant la logique de localisation d\u00e9crite ci-dessous. Voici un rapide r\u00e9capitulatif des fichiers utilis\u00e9s comme source et de la structure g\u00e9n\u00e9r\u00e9e que vous voyez en ce moment:</p> <pre><code>docs\n\u251c\u2500\u2500 image.en.png\n\u251c\u2500\u2500 image.fr.png  &lt;-- this image file is used on the /fr version\n\u251c\u2500\u2500 index.fr.md  &lt;-- this file is used on the /fr version\n\u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 named_file.en.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file.fr.md\n\u2514\u2500\u2500 topic2\n    \u251c\u2500\u2500 index.en.md\n    \u2514\u2500\u2500 index.md\n</code></pre> <pre><code>site\n\u251c\u2500\u2500 en\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 fr\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png  &lt;-- you see this image on the /fr version\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html  &lt;-- you are here on the /fr version\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 image.png\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 topic2\n    \u2514\u2500\u2500 index.html\n</code></pre>"},{"location":"fr/#localisation-automatique-des-medias-liens-assets","title":"Localisation automatique des m\u00e9dias / liens / assets","text":"<p>La source de cette image est dynamiquement localis\u00e9e bien qu'elle soit r\u00e9f\u00e9renc\u00e9e dans la source du markdown par <code>![localized image](image.png)</code>. Cela d\u00e9montre que ce plugin vous permet de ne pas vous pr\u00e9occuper du nom des fichiers dans vos liens, m\u00e9dias et contenus statiques : utilisez leurs noms sans extension localis\u00e9e et concentrez-vous sur la traduction de vos contenus !</p>"},{"location":"fr/#logique-de-localisation","title":"Logique de localisation","text":"<p>Ce site est construit avec cette configuration :</p> <pre><code>plugins:\n  - i18n:\n      default_language: en\n      languages:\n        en: english\n        fr: fran\u00e7ais\n</code></pre> <p>Ce qui veut dire que nous obtiendrons trois versions de notre site :</p> <ol> <li>la version <code>default_language</code> qui utilisera en premier les fichiers dont l'extension est <code>.md</code> et prendra quelconque fichier en <code>.en.md</code> en repli puisque la version <code>en</code> est configur\u00e9e comme la langue par d\u00e9faut</li> <li>la version localis\u00e9e <code>/en</code> qui utilisera les fichiers dont l'extension est <code>.en.md</code> en premier et utilisera leur version <code>.md</code> en repli si elle existe</li> <li>la version localis\u00e9e <code>/fr</code> qui utilisera les fichiers dont l'extension est <code>.fr.md</code> en premier et utilisera en repli soit la version <code>.en.md</code> (d\u00e9riv\u00e9e du langage par d\u00e9faut) ou <code>.md</code></li> </ol> <p>En suivant cette logique, la structure <code>site</code> g\u00e9n\u00e9r\u00e9e est :</p> <pre><code>site\n\u251c\u2500\u2500 404.html\n\u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 images\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 javascripts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 stylesheets\n\u251c\u2500\u2500 en\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 fr\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 image.png\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 topic2\n    \u2514\u2500\u2500 index.html\n</code></pre>"},{"location":"fr/ECS/named_file/","title":"ECS (Entit\u00e9s, composants, syst\u00e8me)","text":""},{"location":"fr/topic1/named_file/","title":"Sujet 1 (french version)","text":"<p>Astuce</p> <p>Utilisez le s\u00e9lecteur de langue dans la barre de titre pour passer d'une version localis\u00e9e \u00e0 l'autre de ce site de d\u00e9monstration. Ce s\u00e9lecteur fait partie de mkdocs-material &gt;= 7.1.0 et est configur\u00e9 automatiquement par ce plugin ou peut \u00eatre d\u00e9fini de mani\u00e8re statique depuis le fichier mkdocs.yml.</p>"},{"location":"fr/topic1/named_file/#ce-que-vous-voyez-en-ce-moment","title":"Ce que vous voyez en ce moment","text":"<p>La source de cette page et son contenu m\u00e9dia ont \u00e9t\u00e9 localis\u00e9s en suivant la logique de localisation d\u00e9crite ci-dessous. Voici un rapide r\u00e9capitulatif des fichiers utilis\u00e9s comme source et de la structure g\u00e9n\u00e9r\u00e9e que vous voyez en ce moment:</p> <pre><code>docs\n\u251c\u2500\u2500 image.en.png\n\u251c\u2500\u2500 image.fr.png  &lt;-- this image file is used on the /fr version\n\u251c\u2500\u2500 index.fr.md\n\u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 named_file.en.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file.fr.md  &lt;-- this file is used on the /fr version\n\u2514\u2500\u2500 topic2\n    \u251c\u2500\u2500 index.en.md\n    \u2514\u2500\u2500 index.md\n</code></pre> <pre><code>site\n\u251c\u2500\u2500 en\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 fr\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png  &lt;-- you see this image on the /fr version\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html  &lt;-- you are here on the /fr version\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 image.png\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 topic2\n    \u2514\u2500\u2500 index.html\n</code></pre>"},{"location":"fr/topic1/named_file/#localisation-automatique-des-medias-liens-assets","title":"Localisation automatique des m\u00e9dias / liens / assets","text":"<p>La source de cette image est dynamiquement localis\u00e9e bien qu'elle soit r\u00e9f\u00e9renc\u00e9e dans la source du markdown par <code>![localized image](image.png)</code>. Cela d\u00e9montre que ce plugin vous permet de ne pas vous pr\u00e9occuper du nom des fichiers dans vos liens, m\u00e9dias et contenus statiques : utilisez leurs noms sans extension localis\u00e9e et concentrez-vous sur la traduction de vos contenus !</p>"},{"location":"fr/topic1/named_file/#logique-de-localisation","title":"Logique de localisation","text":"<p>Ce site est construit avec cette configuration :</p> <pre><code>plugins:\n  - i18n:\n      default_language: en\n      languages:\n        en: english\n        fr: fran\u00e7ais\n</code></pre> <p>Ce qui veut dire que nous obtiendrons trois versions de notre site :</p> <ol> <li>la version <code>default_language</code> qui utilisera en premier les fichiers dont l'extension est <code>.md</code> et prendra quelconque fichier en <code>.en.md</code> en repli puisque la version <code>en</code> est configur\u00e9e comme la langue par d\u00e9faut</li> <li>la version localis\u00e9e <code>/en</code> qui utilisera les fichiers dont l'extension est <code>.en.md</code> en premier et utilisera leur version <code>.md</code> en repli si elle existe</li> <li>la version localis\u00e9e <code>/fr</code> qui utilisera les fichiers dont l'extension est <code>.fr.md</code> en premier et utilisera en repli soit la version <code>.en.md</code> (d\u00e9riv\u00e9e du langage par d\u00e9faut) ou <code>.md</code></li> </ol> <p>En suivant cette logique, la structure <code>site</code> g\u00e9n\u00e9r\u00e9e est :</p> <pre><code>site\n\u251c\u2500\u2500 404.html\n\u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 images\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 javascripts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 stylesheets\n\u251c\u2500\u2500 en\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 fr\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 image.png\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 topic2\n    \u2514\u2500\u2500 index.html\n</code></pre>"},{"location":"fr/topic2/","title":"Topic 2 (english version + french version)","text":"<p>Tip</p> <p>Use the language switcher in the header to switch between the localized versions of this demo website. This switcher is part of mkdocs-material &gt;= 7.1.0 and is automatically configured by this plugin or can be statically configured from the mkdocs.yml file.</p>"},{"location":"fr/topic2/#what-you-are-seeing-now","title":"What you are seeing now","text":"<p>This page source file and media content have been localized after applying the localized build logic described below. Here is a quick recap of the files used as source and the generated build structure of what you see:</p> <pre><code>docs\n\u251c\u2500\u2500 image.en.png  &lt;-- this image file is used on the /en version\n\u251c\u2500\u2500 image.fr.png  &lt;-- this image file is used on the /fr version\n\u251c\u2500\u2500 index.fr.md\n\u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 named_file.en.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file.fr.md\n\u2514\u2500\u2500 topic2\n    \u251c\u2500\u2500 index.en.md  &lt;-- this file is used for both /en and /fr versions\n    \u2514\u2500\u2500 index.md\n</code></pre> <pre><code>site\n\u251c\u2500\u2500 en\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png  &lt;-- you see this image on the /en version\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html  &lt;-- you are here on the /en version\n\u251c\u2500\u2500 fr\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 image.png  &lt;-- you see this image on the /fr version\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 topic2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html  &lt;-- you are here on the /fr version\n\u251c\u2500\u2500 image.png\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 topic1\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 named_file\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 topic2\n    \u2514\u2500\u2500 index.html\n</code></pre>"}]}